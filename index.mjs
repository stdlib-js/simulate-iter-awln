// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-accessor@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-write-accessor@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-iterator-like@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-function@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-uint32array@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-copy@esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-noop@esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-constant-function@esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/symbol-iterator@esm/index.mjs";import j from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-laplace@esm/index.mjs";import c from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@esm/index.mjs";import g from"https://cdn.jsdelivr.net/gh/stdlib-js/constants-float64-sqrt-two@esm/index.mjs";var f={copy:!0},b=e,v=t,y=n,x=s,w=r.isPrimitive,L=i,T=o,E=d.isPrimitive,N=m,P=a,O=l,q=p,G=u,R=h,V=j.factory,k=c,A=g,F=f;var S=function e(t,n,s){var r,i,o,d;if(!x(t))throw new TypeError(k("invalid argument. First argument must be an iterator. Value: `%s`.",t));if(!w(n))throw new TypeError(k("invalid argument. Second argument must be a positive number. Value: `%s`.",n));if(i=O(F),arguments.length>2){if(!L(s))throw new TypeError(k("invalid argument. Third argument must be an object. Value: `%s`.",s));if(P(s,"copy")&&(i.copy=s.copy,!E(s.copy)))throw new TypeError(k("invalid option. `%s` option must be a boolean. Option: `%s`.","copy",s.copy));if(P(s,"prng")){if(!T(s.prng))throw new TypeError(k("invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.","prng",s.prng));i.prng=s.prng}else if(P(s,"state")){if(i.state=s.state,!N(s.state))throw new TypeError(k("invalid option. `%s` option must be a Uint32Array. Option: `%s`.","state",s.state))}else if(P(s,"seed")&&(i.seed=s.seed,void 0===s.seed))throw new TypeError(k("invalid option. `%s` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `%s`.","seed",s.seed))}return r=V(0,n/A,i),b(o={},"next",j),b(o,"return",c),R&&T(t[R])&&b(o,R,g),s&&s.prng?(b(o,"seed",null),b(o,"seedLength",null),y(o,"state",G(null),q),b(o,"stateLength",null),b(o,"byteLength",null),b(o,"PRNG",s.prng)):(v(o,"seed",m),v(o,"seedLength",a),y(o,"state",u,h),v(o,"stateLength",l),v(o,"byteLength",p),b(o,"PRNG",r.PRNG)),o;function m(){return r.seed}function a(){return r.seedLength}function l(){return r.stateLength}function p(){return r.byteLength}function u(){return r.state}function h(e){r.state=e}function j(){var e;return d?{done:!0}:(e=t.next()).done?(d=!0,e):{value:e="number"==typeof e.value?e.value+r():NaN,done:!1}}function c(e){return d=!0,arguments.length?{value:e,done:!0}:{done:!0}}function g(){return e(t[R](),n,i)}},U=S;export{U as default};
//# sourceMappingURL=index.mjs.map
