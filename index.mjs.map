{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/defaults.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport setReadWriteAccessor from '@stdlib/utils-define-nonenumerable-read-write-accessor';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert-is-positive-number';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport isFunction from '@stdlib/assert-is-function';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport isUint32Array from '@stdlib/assert-is-uint32array';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport noop from '@stdlib/utils-noop';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport { factory as laplace } from '@stdlib/random-base-laplace';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport SQRT_TWO from '@stdlib/constants-float64-sqrt-two';\nimport defaults from './defaults.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which introduces additive white Laplacian noise with standard deviation `sigma`.\n*\n* ## Method\n*\n* -   The variance of a Laplace (biexponential or double-exponential) distribution is given by\n*\n*     ```tex\n*     \\operatorname{Var} = 2b^2\n*     ```\n*\n*     where \\\\( b \\\\) is the distribution scale parameter.\n*\n* -   Accordingly, the standard deviation is then\n*\n*     ```tex\n*     \\sigma = b\\sqrt{2}\n*     ```\n*\n* -   Solving for \\\\( b \\\\), we derive the parameter transform necessary for generating a Laplacian random variable with standard deviation \\\\( \\sigma \\\\)\n*\n*     ```tex\n*     b = \\frac{\\sigma}{\\sqrt{2}}\n*     ```\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveNumber} sigma - standard deviation of the noise\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive number\n* @throws {TypeError} third argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* import iterSineWave from '@stdlib/simulate-iter-sine-wave';\n*\n* var sine = iterSineWave({\n*     'iter': 100\n* });\n*\n* var it = iterawln( sine, 0.5 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterawln( iterator, sigma, options ) {\n\tvar rlaplace;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( '0RS48', iterator ) );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( format( '0RS7T', sigma ) );\n\t}\n\topts = defaults();\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( '0RS8b', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( format( '0RS30', 'copy', options.copy ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\tif ( !isFunction( options.prng ) ) {\n\t\t\t\tthrow new TypeError( format( '0RS7M', 'prng', options.prng ) );\n\t\t\t}\n\t\t\topts.prng = options.prng;\n\t\t}\n\t\t// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.\n\t\telse if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( !isUint32Array( options.state ) ) {\n\t\t\t\tthrow new TypeError( format( '0RS7I', 'state', options.state ) );\n\t\t\t}\n\t\t}\n\t\t// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.\n\t\telse if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( options.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( '0RS7N', 'seed', options.seed ) );\n\t\t\t}\n\t\t}\n\t}\n\trlaplace = laplace( 0.0, sigma/SQRT_TWO, opts );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( options && options.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t\tsetReadOnly( iter, 'PRNG', options.prng );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t\tsetReadOnly( iter, 'PRNG', rlaplace.PRNG );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rlaplace.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rlaplace.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rlaplace.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rlaplace.byteLength;\n\t}\n\n\t/**\n\t* Returns the current PRNG state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rlaplace.state;\n\t}\n\n\t/**\n\t* Sets the PRNG state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trlaplace.state = s;\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = v.value + rlaplace();\n\t\t} else {\n\t\t\tv = NaN;\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterawln( iterator[ iteratorSymbol ](), sigma, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterawln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'copy': true\n\t};\n}\n\n\n// EXPORTS //\n\nexport default defaults;\n"],"names":["iterawln","iterator","sigma","options","rlaplace","opts","iter","FLG","isIteratorLike","TypeError","format","isPositiveNumber","copy","arguments","length","isPlainObject","hasOwnProp","isBoolean","isFunction","prng","state","isUint32Array","seed","laplace","SQRT_TWO","setReadOnly","next","end","iteratorSymbol","factory","setReadWriteAccessor","constantFunction","noop","setReadOnlyAccessor","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","PRNG","seedLength","stateLength","byteLength","s","v","done","value","NaN"],"mappings":";;+gDAsGA,SAASA,EAAUC,EAAUC,EAAOC,GACnC,IAAIC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAgBP,GACrB,MAAM,IAAIQ,UAAWC,EAAQ,QAAST,IAEvC,IAAMU,EAAkBT,GACvB,MAAM,IAAIO,UAAWC,EAAQ,QAASR,IAGvC,GADAG,ECpFO,CACNO,MAAQ,GDoFJC,UAAUC,OAAS,EAAI,CAC3B,IAAMC,EAAeZ,GACpB,MAAM,IAAIM,UAAWC,EAAQ,QAASP,IAEvC,GAAKa,EAAYb,EAAS,UACzBE,EAAKO,KAAOT,EAAQS,MACdK,EAAWd,EAAQS,OACxB,MAAM,IAAIH,UAAWC,EAAQ,QAAS,OAAQP,EAAQS,OAGxD,GAAKI,EAAYb,EAAS,QAAW,CACpC,IAAMe,EAAYf,EAAQgB,MACzB,MAAM,IAAIV,UAAWC,EAAQ,QAAS,OAAQP,EAAQgB,OAEvDd,EAAKc,KAAOhB,EAAQgB,IACpB,MAEI,GAAKH,EAAYb,EAAS,UAE9B,GADAE,EAAKe,MAAQjB,EAAQiB,OACfC,EAAelB,EAAQiB,OAC5B,MAAM,IAAIX,UAAWC,EAAQ,QAAS,QAASP,EAAQiB,aAIpD,GAAKJ,EAAYb,EAAS,UAC9BE,EAAKiB,KAAOnB,EAAQmB,UACE,IAAjBnB,EAAQmB,MACZ,MAAM,IAAIb,UAAWC,EAAQ,QAAS,OAAQP,EAAQmB,MAGxD,CA4BD,OA3BAlB,EAAWmB,EAAS,EAAKrB,EAAMsB,EAAUnB,GAIzCoB,EADAnB,EAAO,CAAA,EACY,OAAQoB,GAC3BD,EAAanB,EAAM,SAAUqB,GAGxBC,GAAkBV,EAAYjB,EAAU2B,KAC5CH,EAAanB,EAAMsB,EAAgBC,GAG/B1B,GAAWA,EAAQgB,MACvBM,EAAanB,EAAM,OAAQ,MAC3BmB,EAAanB,EAAM,aAAc,MACjCwB,EAAsBxB,EAAM,QAASyB,EAAkB,MAAQC,GAC/DP,EAAanB,EAAM,cAAe,MAClCmB,EAAanB,EAAM,aAAc,MACjCmB,EAAanB,EAAM,OAAQH,EAAQgB,QAEnCc,EAAqB3B,EAAM,OAAQ4B,GACnCD,EAAqB3B,EAAM,aAAc6B,GACzCL,EAAsBxB,EAAM,QAAS8B,EAAUC,GAC/CJ,EAAqB3B,EAAM,cAAegC,GAC1CL,EAAqB3B,EAAM,aAAciC,GACzCd,EAAanB,EAAM,OAAQF,EAASoC,OAE9BlC,EAQP,SAAS4B,IACR,OAAO9B,EAASkB,IAChB,CAQD,SAASa,IACR,OAAO/B,EAASqC,UAChB,CAQD,SAASH,IACR,OAAOlC,EAASsC,WAChB,CAQD,SAASH,IACR,OAAOnC,EAASuC,UAChB,CAQD,SAASP,IACR,OAAOhC,EAASgB,KAChB,CASD,SAASiB,EAAUO,GAClBxC,EAASgB,MAAQwB,CACjB,CAQD,SAASlB,IACR,IAAImB,EACJ,OAAKtC,EACG,CACNuC,MAAQ,IAGVD,EAAI5C,EAASyB,QACNoB,MACNvC,GAAM,EACCsC,GAOD,CACNE,MALAF,EADuB,iBAAZA,EAAEE,MACTF,EAAEE,MAAQ3C,IAEV4C,IAIJF,MAAQ,EAET,CASD,SAASnB,EAAKoB,GAEb,OADAxC,GAAM,EACDM,UAAUC,OACP,CACNiC,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,EAET,CAQD,SAASjB,IACR,OAAO7B,EAAUC,EAAU2B,KAAoB1B,EAAOG,EACtD,CACF"}