{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils-define-nonenumerable-read-write-accessor' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isPositiveNumber = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isUint32Array = require( '@stdlib/assert-is-uint32array' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar copy = require( '@stdlib/utils-copy' );\nvar noop = require( '@stdlib/utils-noop' );\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar laplace = require( '@stdlib/random-base-laplace' ).factory;\nvar format = require( '@stdlib/string-format' );\nvar SQRT_TWO = require( '@stdlib/constants-float64-sqrt-two' );\nvar DEFAULTS = require( './defaults.json' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which introduces additive white Laplacian noise with standard deviation `sigma`.\n*\n* ## Method\n*\n* -   The variance of a Laplace (biexponential or double-exponential) distribution is given by\n*\n*     ```tex\n*     \\operatorname{Var} = 2b^2\n*     ```\n*\n*     where \\\\( b \\\\) is the distribution scale parameter.\n*\n* -   Accordingly, the standard deviation is then\n*\n*     ```tex\n*     \\sigma = b\\sqrt{2}\n*     ```\n*\n* -   Solving for \\\\( b \\\\), we derive the parameter transform necessary for generating a Laplacian random variable with standard deviation \\\\( \\sigma \\\\)\n*\n*     ```tex\n*     b = \\frac{\\sigma}{\\sqrt{2}}\n*     ```\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveNumber} sigma - standard deviation of the noise\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive number\n* @throws {TypeError} third argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iterSineWave = require( '@stdlib/simulate-iter-sine-wave' );\n*\n* var sine = iterSineWave({\n*     'iter': 100\n* });\n*\n* var it = iterawln( sine, 0.5 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterawln( iterator, sigma, options ) {\n\tvar rlaplace;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', sigma ) );\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', options.copy ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\tif ( !isFunction( options.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', options.prng ) );\n\t\t\t}\n\t\t\topts.prng = options.prng;\n\t\t}\n\t\t// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.\n\t\telse if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( !isUint32Array( options.state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', options.state ) );\n\t\t\t}\n\t\t}\n\t\t// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.\n\t\telse if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( options.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `%s`.', 'seed', options.seed ) );\n\t\t\t}\n\t\t}\n\t}\n\trlaplace = laplace( 0.0, sigma/SQRT_TWO, opts );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( options && options.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t\tsetReadOnly( iter, 'PRNG', options.prng );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t\tsetReadOnly( iter, 'PRNG', rlaplace.PRNG );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rlaplace.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rlaplace.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rlaplace.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rlaplace.byteLength;\n\t}\n\n\t/**\n\t* Returns the current PRNG state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rlaplace.state;\n\t}\n\n\t/**\n\t* Sets the PRNG state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trlaplace.state = s;\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = v.value + rlaplace();\n\t\t} else {\n\t\t\tv = NaN;\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterawln( iterator[ iteratorSymbol ](), sigma, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterawln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which introduces additive white Laplacian noise (AWLN).\n*\n* @module @stdlib/simulate-iter-awln\n*\n* @example\n* var iterSineWave = require( '@stdlib/simulate-iter-sine-wave' );\n* var iterawln = require( '@stdlib/simulate-iter-awln' );\n*\n* var sine = iterSineWave({\n*     'iter': 100\n* });\n*\n* var it = iterawln( sine, 0.5 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n"],"names":["setReadOnly","require$$0","setReadOnlyAccessor","require$$1","setReadWriteAccessor","require$$2","isIteratorLike","require$$3","isPositiveNumber","require$$4","isPrimitive","isPlainObject","require$$5","isFunction","require$$6","isBoolean","require$$7","isUint32Array","require$$8","hasOwnProp","require$$9","copy","require$$10","noop","require$$11","constantFunction","require$$12","iteratorSymbol","require$$13","laplace","require$$14","factory","format","require$$15","SQRT_TWO","require$$16","DEFAULTS","require$$17","main","iterawln","iterator","sigma","options","rlaplace","opts","iter","FLG","TypeError","arguments","length","prng","state","seed","next","end","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","PRNG","seedLength","stateLength","byteLength","s","v","done","value","NaN","lib"],"mappings":"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"}