{
  "version": 3,
  "sources": ["../lib/defaults.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'copy': true\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = defaults;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils-define-nonenumerable-read-write-accessor' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isPositiveNumber = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isUint32Array = require( '@stdlib/assert-is-uint32array' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar noop = require( '@stdlib/utils-noop' );\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar laplace = require( '@stdlib/random-base-laplace' ).factory;\nvar format = require( '@stdlib/string-format' );\nvar SQRT_TWO = require( '@stdlib/constants-float64-sqrt-two' );\nvar defaults = require( './defaults.js' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which introduces additive white Laplacian noise with standard deviation `sigma`.\n*\n* ## Method\n*\n* -   The variance of a Laplace (biexponential or double-exponential) distribution is given by\n*\n*     ```tex\n*     \\operatorname{Var} = 2b^2\n*     ```\n*\n*     where \\\\( b \\\\) is the distribution scale parameter.\n*\n* -   Accordingly, the standard deviation is then\n*\n*     ```tex\n*     \\sigma = b\\sqrt{2}\n*     ```\n*\n* -   Solving for \\\\( b \\\\), we derive the parameter transform necessary for generating a Laplacian random variable with standard deviation \\\\( \\sigma \\\\)\n*\n*     ```tex\n*     b = \\frac{\\sigma}{\\sqrt{2}}\n*     ```\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveNumber} sigma - standard deviation of the noise\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive number\n* @throws {TypeError} third argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iterSineWave = require( '@stdlib/simulate-iter-sine-wave' );\n*\n* var sine = iterSineWave({\n*     'iter': 100\n* });\n*\n* var it = iterawln( sine, 0.5 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterawln( iterator, sigma, options ) {\n\tvar rlaplace;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', sigma ) );\n\t}\n\topts = defaults();\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', options.copy ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\tif ( !isFunction( options.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', options.prng ) );\n\t\t\t}\n\t\t\topts.prng = options.prng;\n\t\t}\n\t\t// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.\n\t\telse if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( !isUint32Array( options.state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', options.state ) );\n\t\t\t}\n\t\t}\n\t\t// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.\n\t\telse if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( options.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `%s`.', 'seed', options.seed ) );\n\t\t\t}\n\t\t}\n\t}\n\trlaplace = laplace( 0.0, sigma/SQRT_TWO, opts );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( options && options.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t\tsetReadOnly( iter, 'PRNG', options.prng );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t\tsetReadOnly( iter, 'PRNG', rlaplace.PRNG );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rlaplace.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rlaplace.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rlaplace.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rlaplace.byteLength;\n\t}\n\n\t/**\n\t* Returns the current PRNG state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rlaplace.state;\n\t}\n\n\t/**\n\t* Sets the PRNG state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trlaplace.state = s;\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = v.value + rlaplace();\n\t\t} else {\n\t\t\tv = NaN;\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterawln( iterator[ iteratorSymbol ](), sigma, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterawln;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which introduces additive white Laplacian noise (AWLN).\n*\n* @module @stdlib/simulate-iter-awln\n*\n* @example\n* var iterSineWave = require( '@stdlib/simulate-iter-sine-wave' );\n* var iterawln = require( '@stdlib/simulate-iter-awln' );\n*\n* var sine = iterSineWave({\n*     'iter': 100\n* });\n*\n* var it = iterawln( sine, 0.5 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_defaults", "__commonJSMin", "exports", "module", "defaults", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isIteratorLike", "isPositiveNumber", "isPlainObject", "isFunction", "isBoolean", "isUint32Array", "hasOwnProp", "noop", "constantFunction", "iteratorSymbol", "laplace", "format", "SQRT_TWO", "defaults", "iterawln", "iterator", "sigma", "options", "rlaplace", "opts", "iter", "FLG", "next", "end", "factory", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "s", "v", "value", "main"]
}
